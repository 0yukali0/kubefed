/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/marun/fnord/pkg/apis/federation/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederationPlacementLister helps list FederationPlacements.
type FederationPlacementLister interface {
	// List lists all FederationPlacements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederationPlacement, err error)
	// FederationPlacements returns an object that can list and get FederationPlacements.
	FederationPlacements(namespace string) FederationPlacementNamespaceLister
	FederationPlacementListerExpansion
}

// federationPlacementLister implements the FederationPlacementLister interface.
type federationPlacementLister struct {
	indexer cache.Indexer
}

// NewFederationPlacementLister returns a new FederationPlacementLister.
func NewFederationPlacementLister(indexer cache.Indexer) FederationPlacementLister {
	return &federationPlacementLister{indexer: indexer}
}

// List lists all FederationPlacements in the indexer.
func (s *federationPlacementLister) List(selector labels.Selector) (ret []*v1alpha1.FederationPlacement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederationPlacement))
	})
	return ret, err
}

// FederationPlacements returns an object that can list and get FederationPlacements.
func (s *federationPlacementLister) FederationPlacements(namespace string) FederationPlacementNamespaceLister {
	return federationPlacementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederationPlacementNamespaceLister helps list and get FederationPlacements.
type FederationPlacementNamespaceLister interface {
	// List lists all FederationPlacements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederationPlacement, err error)
	// Get retrieves the FederationPlacement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederationPlacement, error)
	FederationPlacementNamespaceListerExpansion
}

// federationPlacementNamespaceLister implements the FederationPlacementNamespaceLister
// interface.
type federationPlacementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederationPlacements in the indexer for a given namespace.
func (s federationPlacementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederationPlacement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederationPlacement))
	})
	return ret, err
}

// Get retrieves the FederationPlacement from the indexer for a given namespace and name.
func (s federationPlacementNamespaceLister) Get(name string) (*v1alpha1.FederationPlacement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federationplacement"), name)
	}
	return obj.(*v1alpha1.FederationPlacement), nil
}
